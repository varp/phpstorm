<application>
  <component name="VimSettings">
    <state version="4" enabled="false" />
    <globalmarks />
    <filemarks>
      <file name="$USER_HOME$/.ideavimrc" timestamp="1535616105279">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="0" column="0" />
        <mark key="^" line="5" column="11" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="/Dummy.txt" timestamp="1535585803993">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/code/lawyer/frontend/views/document/common/sign.php" timestamp="1535548110820">
        <mark key="'" line="52" column="0" />
      </file>
      <file name="$USER_HOME$/code/lawyer/frontend/resources/js/taxsign/src/alert.js" timestamp="1535618299498">
        <mark key="'" line="0" column="15" />
        <mark key="[" line="0" column="14" />
        <mark key="]" line="0" column="13" />
        <mark key="." line="0" column="13" />
        <mark key="^" line="0" column="13" />
      </file>
      <file name="$USER_HOME$/code/lawyer/frontend/resources/js/taxsign/src/logger.js" timestamp="1535660374907">
        <mark key="'" line="7" column="0" />
        <mark key="[" line="36" column="19" />
        <mark key="]" line="37" column="50" />
        <mark key="^" line="37" column="50" />
        <mark key="." line="37" column="50" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/scratches/scratch.js" timestamp="1535544756785">
        <mark key="[" line="2" column="0" />
        <mark key="]" line="2" column="7" />
        <mark key="^" line="2" column="7" />
        <mark key="." line="2" column="7" />
      </file>
      <file name="$USER_HOME$/code/lawyer/frontend/resources/js/taxsign/src/info.js" timestamp="1535658492900">
        <mark key="'" line="21" column="0" />
      </file>
      <file name="$USER_HOME$/code/lawyer/.gitignore" timestamp="1535571961365">
        <mark key="'" line="21" column="0" />
      </file>
      <file name="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" timestamp="1535616091216">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="138" column="37" />
        <mark key="]" line="138" column="36" />
        <mark key="^" line="138" column="36" />
        <mark key="." line="138" column="36" />
      </file>
      <file name="$USER_HOME$/code/lawyer/frontend/resources/js/taxsign/webpack.config.js" timestamp="1535660529795">
        <mark key="'" line="22" column="12" />
        <mark key="[" line="6" column="28" />
        <mark key="]" line="6" column="27" />
        <mark key="." line="6" column="27" />
        <mark key="^" line="6" column="27" />
      </file>
      <file name="$USER_HOME$/code/lawyer/common/components/converter/PdfConverter.php" timestamp="1535547257048">
        <mark key="'" line="36" column="4" />
      </file>
      <file name="$USER_HOME$/code/lawyer/frontend/controllers/document/NewBaseController.php" timestamp="1535574243446">
        <mark key="'" line="765" column="0" />
      </file>
      <file name="$USER_HOME$/code/lawyer/vendor/yiisoft/yii2/base/Application.php" timestamp="1535544164534">
        <mark key="'" line="230" column="10" />
      </file>
      <file name="$USER_HOME$/code/lawyer/frontend/resources/js/taxsign/src/container.js" timestamp="1535660729687">
        <mark key="'" line="120" column="43" />
        <mark key="[" line="120" column="39" />
        <mark key="]" line="120" column="47" />
        <mark key="." line="120" column="47" />
        <mark key="^" line="120" column="47" />
      </file>
      <file name="$USER_HOME$/code/lawyer/frontend/resources/js/taxsign/src/index.js" timestamp="1535659826459">
        <mark key="[" line="6" column="0" />
        <mark key="]" line="6" column="0" />
        <mark key="." line="6" column="0" />
      </file>
      <file name="$APPLICATION_CONFIG_DIR$/scratches/scratch_1.js" timestamp="1535561353181">
        <mark key="[" line="1" column="52" />
        <mark key="]" line="1" column="52" />
        <mark key="^" line="1" column="52" />
        <mark key="." line="1" column="52" />
      </file>
    </filemarks>
    <jumps>
      <jump line="256" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="258" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="260" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="270" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="277" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="281" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="405" column="10" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="390" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="400" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="402" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="404" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="406" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="496" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="525" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="528" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="526" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="520" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="516" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="511" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="508" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="501" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="499" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="497" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="490" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="484" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="481" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="462" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="453" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="447" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="439" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="436" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="408" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="410" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="413" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="417" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="419" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="425" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="435" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="438" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="446" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="450" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="452" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="455" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="459" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="464" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="466" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="489" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="468" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="470" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="472" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="476" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="483" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="480" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="478" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="192" column="28" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="313" column="31" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="236" column="51" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="235" column="41" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="257" column="77" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="223" column="16" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="249" column="34" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="250" column="34" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="248" column="32" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="134" column="30" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="143" column="48" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="142" column="16" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="141" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="179" column="8" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="193" column="32" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="195" column="48" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="199" column="28" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="232" column="32" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="139" column="29" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="4" column="10" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="430" column="57" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="786" column="16" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="797" column="26" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="426" column="22" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="434" column="40" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="440" column="35" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="442" column="39" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="443" column="37" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="444" column="35" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="451" column="69" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="6" column="48" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="0" column="0" filename="$USER_HOME$/code/lawyer/frontend/web/js/sign.js" />
      <jump line="34" column="3" filename="$USER_HOME$/code/lawyer/frontend/resources/js/taxsign/src/alert.js" />
      <jump line="32" column="5" filename="$USER_HOME$/code/lawyer/frontend/resources/js/taxsign/src/alert.js" />
      <jump line="0" column="15" filename="$USER_HOME$/code/lawyer/frontend/resources/js/taxsign/src/alert.js" />
      <jump line="45" column="4" filename="$USER_HOME$/code/lawyer/frontend/resources/js/taxsign/src/info.js" />
      <jump line="44" column="0" filename="$USER_HOME$/code/lawyer/frontend/resources/js/taxsign/src/info.js" />
      <jump line="38" column="0" filename="$USER_HOME$/code/lawyer/frontend/resources/js/taxsign/src/info.js" />
      <jump line="31" column="0" filename="$USER_HOME$/code/lawyer/frontend/resources/js/taxsign/src/info.js" />
      <jump line="23" column="0" filename="$USER_HOME$/code/lawyer/frontend/resources/js/taxsign/src/info.js" />
      <jump line="15" column="0" filename="$USER_HOME$/code/lawyer/frontend/resources/js/taxsign/src/info.js" />
      <jump line="21" column="0" filename="$USER_HOME$/code/lawyer/frontend/resources/js/taxsign/src/info.js" />
      <jump line="20" column="12" filename="$USER_HOME$/code/lawyer/frontend/resources/js/taxsign/webpack.config.js" />
      <jump line="33" column="33" filename="$USER_HOME$/code/lawyer/frontend/resources/js/taxsign/src/logger.js" />
      <jump line="7" column="0" filename="$USER_HOME$/code/lawyer/frontend/resources/js/taxsign/src/logger.js" />
      <jump line="120" column="43" filename="$USER_HOME$/code/lawyer/frontend/resources/js/taxsign/src/container.js" />
    </jumps>
    <registers>
      <register name="&quot;" type="4">
        <text>exception</text>
      </register>
      <register name="-" type="4">
        <text>exception</text>
      </register>
      <register name="/" type="4">
        <text>VERSION</text>
      </register>
      <register name="0" type="4">
        <text>_this.sentryLogger.exception</text>
      </register>
      <register name="1" type="4">
        <text>setTags(
            {
                'version': VERSION
            }
        )</text>
      </register>
      <register name="2" type="2">
        <text encoding="base64">Y29uc3QgVkVSU0lPTiA9ICIxLjAuMC13ZWJwYWNrIjsK</text>
      </register>
      <register name="3" type="4">
        <text encoding="base64">IjsK</text>
      </register>
      <register name="4" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="5" type="2">
        <text encoding="base64">bGV0IFZFUlNJT04gPSAiMS4wLjAtd2VicGFjayI7Cg==</text>
      </register>
      <register name="6" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="7" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="8" type="2">
        <text encoding="base64">c2V0IG11bHRpcGxlLWN1cnNvcnMK</text>
      </register>
      <register name="y" type="4">
        <text>url + &quot;?containerName=&quot; + containerName + _debugUrl</text>
      </register>
      <register name="9" type="2">
        <text encoding="base64">c2V0IHN1cnJvbmQK</text>
      </register>
      <register name=":" type="4">
        <text>w</text>
      </register>
    </registers>
    <search>
      <last-search>VERSION</last-search>
      <last-offset />
      <last-pattern>VERSION</last-pattern>
      <last-replace />
      <last-substitute>certToCheck\.</last-substitute>
      <last-dir>1</last-dir>
      <show-last>true</show-last>
    </search>
    <history>
      <history-search>
        <entry encoding="base64">XDwoXD4=</entry>
        <entry>uploadSeconfd</entry>
        <entry>upload.*Second</entry>
        <entry>upload*Second</entry>
        <entry>upload</entry>
        <entry>\.*Second</entry>
        <entry>IsPresent</entry>
        <entry>certToCheck</entry>
        <entry>certToCheck\.</entry>
        <entry encoding="base64">XDxLZXlVc2FnZVw+</entry>
        <entry>_getCert</entry>
        <entry>check</entry>
        <entry>^check</entry>
        <entry>check\(</entry>
        <entry>oStore.Close()</entry>
        <entry>addSign</entry>
        <entry>signData</entry>
        <entry>finally</entry>
        <entry>catch</entry>
        <entry>check(</entry>
        <entry encoding="base64">XDxzdG9yZUNlcnRzXD4=</entry>
        <entry>oSigner</entry>
        <entry encoding="base64">XDxvU2lnbmVyXD4=</entry>
        <entry encoding="base64">XDxzdG9yZUNlcnN0Q250XD4=</entry>
        <entry encoding="base64">XDxMb2NhdGlvblw+</entry>
        <entry encoding="base64">XDwpXD4=</entry>
        <entry>oStore</entry>
        <entry>Alert</entry>
        <entry encoding="base64">XDxBbGVydFw+</entry>
        <entry>ContainerApi</entry>
        <entry encoding="base64">XDxmdWxsbmFtZVw+</entry>
        <entry encoding="base64">XDx0YXhDb2RlXD4=</entry>
        <entry encoding="base64">XDxkb21cPg==</entry>
        <entry>VERSION</entry>
      </history-search>
      <history-cmd>
        <entry>help g</entry>
        <entry>tabclose</entry>
        <entry>bd</entry>
        <entry encoding="base64">JzwsJz4vY2VydFRvQ2hlY2svLw==</entry>
        <entry encoding="base64">JzwsJz4lcy9jZXJ0VG9DaGVjay8v</entry>
        <entry encoding="base64">JzwsJz54L2NlcnRUb0NoZWNrXC4=</entry>
        <entry encoding="base64">JzwsJz5zL2NlcnRUb0NoZWNrXC4vLw==</entry>
        <entry encoding="base64">JzwsJz5zL2NlcnRUb0NoZWNrXC4vL2c=</entry>
        <entry>e $MYVIMRC</entry>
        <entry>Ex .</entry>
        <entry>new</entry>
        <entry>bn</entry>
        <entry>buffers</entry>
        <entry>touch ~/.ideavimrc</entry>
        <entry>tabnew</entry>
        <entry>set history=100</entry>
        <entry>set mutiple-cursors</entry>
        <entry>set nu</entry>
        <entry>set !nu</entry>
        <entry>set vb</entry>
        <entry>set incsearch</entry>
        <entry>set incsearch=on</entry>
        <entry>set is=on</entry>
        <entry>q</entry>
        <entry>changes</entry>
        <entry>set hlsearch</entry>
        <entry>set nohlseach</entry>
        <entry>source ~/.ideavimrc</entry>
        <entry>e ~/.ideavimrc</entry>
        <entry>source %</entry>
        <entry>vsplit</entry>
        <entry>e</entry>
        <entry>W</entry>
        <entry>split</entry>
        <entry>w</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed O</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed P</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed E</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed H</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed M</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed N</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed D</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed T</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed I</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed G</text>
      </shortcut-conflict>
    </shortcut-conflicts>
    <editor>
      <key-repeat enabled="true" />
    </editor>
  </component>
</application>